version: 2
# https://circleci.com/docs/configuration#machine
jobs:
    build:
        docker:
            - image: quay.io/pantheon-public/build-tools-ci:1.x
        working_directory: ~/working
        environment:
            BASH_ENV: ~/.bashrc
            TZ: "/usr/share/zoneinfo/America/Los_Angeles"
            TERMINUS_SITE: migrate-pantheon-d8
            PANTHEON_D7_SITE: d7-migration-source
            PANTHEON_D7_BRANCH: dev
        steps:
            - checkout
            - run:
                name: log in
                command: |
                  mkdir -p $HOME/.ssh && echo "StrictHostKeyChecking no" >> "$HOME/.ssh/config"
                  terminus auth:login -n --machine-token="$TerminusToken"
                  terminus env:list --field=id $TERMINUS_SITE | grep -v '[a-z]' | grep -Eo '[0-9]{1,9}' | sort --numeric-sort --reverse | sed 1,7d | xargs -n1 -I ENV terminus env:delete --yes $TERMINUS_SITE.ENV

            - restore_cache:
                key: dependency-cache-{{ checksum "composer.lock" }}
            - run:
                name: Composer install
                command: |
                  composer install
                  drush help
            - save_cache:
                key: dependency-cache-{{ checksum "composer.lock" }}
                paths:
                  - ~/.composer/cache

            - run:
                name: all the things
                command: |

                  export TERMINUS_ENV=$CIRCLE_BUILD_NUM
                  export SITE_ENV=$TERMINUS_SITE.$TERMINUS_ENV
                  cd .circleci/tests
                  # Make a new multidev env from a vanilla D8 site.
                  ./create-fresh-d8-site.sh

                  # Set up the D8 site with contrib migrate contrib modules and enable
                  # those modules on Panetheon.
                  ./setup-d8-repo.sh

                   # Configure the migration, creating exportable, re-runnable configuration.
                  ./configure-migrations.sh

                  # Run the actual migration on Pantheon.
                  ./run-migration-on-pantheon.sh

                  # Check that a node actually migrated.
                  ./verify-migration-succeeded.sh
